// Clang 5.x.x
//------------------------------------------------------------------------------
.Clang5_BasePath = '../External/SDK/Clang/Windows/5.0.1'

// Compiler
//------------------------------------------------------------------------------
Compiler( 'Compiler-Clang5' )
{
    .Root                           = '$Clang5_BasePath$'
    .Executable                     = '$Root$\bin\clang++.exe'
    .ExtraFiles                     = {
                                        '$Root$\bin\msvcp140.dll'
                                        '$Root$\bin\vcruntime140.dll'
                                      }
}

// ToolChain
//------------------------------------------------------------------------------
.ToolChain_Clang_Windows =
[
    // Clang for Windows relies on the VS being present:
    //  - crt headers
    //  - crt libs/dlls
    //  - linker
    Using( .ToolChain_VS_Windows_X64 )

    .Platform                       = 'x64Clang'

    // Compiler Options
    .Compiler                       = 'Compiler-Clang5'
    .CommonCompilerOptions          = ' -c -g'

                                    // includes
                                    + ' -I"./"'
                                    + .VSIncludePaths

                                    // x64
                                    + ' -m64'

                                    // Enable warnings
                                    + ' -Wall -Werror -Wfatal-errors'   // warnings as errors
                                    + ' -Wextra'
                                    + ' -Wshadow'

                                    // No RTTI
                                    + ' -fno-rtti'

                                    // MS compatibility
                                    + ' -fms-compatibility'
                                    + ' -fms-extensions'
                                    + ' -fmsc-version=$MSC_VER$'
                                    + ' -Xclang -flto-visibility-public-std' // LTO visibility matches MSVC behaviour

                                    // as of v5.0.1, these warnings fire inside system headers
                                    + ' -Wno-#pragma-messages'          // warning : %s [-W#pragma-messages]
                                    + ' -Wno-unknown-pragmas'           // unknown pragma ignored [-Wunknown-pragmas]
                                    + ' -Wno-ignored-attributes'        // __declspec attribute 'restrict' is not supported [-Werror,-Wignored-attributes]
                                    + ' -Wno-invalid-token-paste'       // pasting formed '"Use ""ADDRINFOEXW"', an invalid preprocessing token [-Winvalid-token-paste]
                                    + ' -Wno-expansion-to-defined'      // macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
                                    + ' -Wno-nonportable-include-path'  // non-portable path to file '"%s"'; specified path differs in case from file name on disk [-Wnonportable-include-path]
                                    + ' -Wno-ignored-pragma-intrinsic'  // _bittest' is not a recognized builtin; consider including <intrin.h> to access non-builtin intrinsics [-Wignored-pragma-intrinsic]
                                    + ' -Wno-int-to-void-pointer-cast'  // cast to 'void *' from smaller integer type 'unsigned long' [-Wint-to-void-pointer-cast]
                                    #if USING_VS2013
                                        + ' -Wno-implicit-exception-spec-mismatch'
                                    #endif
                                    + ' -Wno-deprecated-declarations' // Clang doesn't respect pragmas disabling warning in stdio.h

                                    // Disabled warnings
                                    + ' -Wno-invalid-offsetof' // we get the offset of members in non-POD types

    .CompilerOptions                = ' -o"%2" "%1" $CommonCompilerOptions$'
    .CompilerOptionsC               = ' -x c -o"%2" "%1" $CommonCompilerOptions$'
    .PCHOptions                     = ' -x c++-header "%1" -o"%2" $CommonCompilerOptions$'

    // Librarian
    .Librarian                      = '$Clang5_BasePath$\bin\llvm-ar.exe'
    .LibrarianOptions               = 'rc "%2" "%1"' // NOTE: output must come first

    // Linker
    //.Linker                       = From VS installation
    .LinkerOptions                  = '/NODEFAULTLIB /WX /NOLOGO /INCREMENTAL:NO /OUT:"%2" "%1" /DEBUG'
                                    + .VSLibPaths

    // File Extensions
    .LibExtension                   = '.a'
    .ExeExtension                   = '.exe'

    // Exception Control
    .UseExceptions                  = ' -fexceptions'
]

//------------------------------------------------------------------------------
