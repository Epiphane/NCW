////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsApp/DisplayLauncher.h>
#include <NsApp/Display.h>
#include <NsCore/Delegate.h>
#include <NsCore/CpuProfiler.h>
#include <NsCore/HighResTimer.h>
#include <NsApp/CommandLine.h>


using namespace Noesis;
using namespace NoesisApp;


////////////////////////////////////////////////////////////////////////////////////////////////////
DisplayLauncher::DisplayLauncher(): mExitCode(0)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
DisplayLauncher::~DisplayLauncher()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
int DisplayLauncher::Run()
{
    Init();

    mDisplay = CreateDisplay();
    OnStartUp();
    mDisplay->Show();

    mDisplay->Render() += [this](Display*)
    {
        static uint64_t startTime = HighResTimer::Ticks();

        NS_PROFILER_CPU_FRAME;
        OnTick(HighResTimer::Seconds(HighResTimer::Ticks() - startTime));
    };

    bool runInBackground = GetRunInBackgroundOverride();
    mDisplay->EnterMessageLoop(runInBackground);

    OnExit();
    mDisplay.Reset();

    return mExitCode;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void DisplayLauncher::Quit(int exitCode)
{
    mExitCode = exitCode;
    mDisplay->Close();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Display* DisplayLauncher::GetDisplay() const
{
    return mDisplay;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void DisplayLauncher::OnStartUp(void)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void DisplayLauncher::OnTick(double)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void DisplayLauncher::OnExit()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool DisplayLauncher::GetRunInBackgroundOverride() const
{
    return GetArguments().HasOption("runInBackground");
}
