#version 460

#include "utils/uniforms.glsl"
#include "utils/chunk.glsl"

layout(local_size_x = 8, local_size_y = 16, local_size_z = 8) in;
layout(std140, binding = 0) buffer inColorsT
{
    vec4 Colors[];
} inColors;

layout(binding = 1, offset = 0) uniform atomic_uint aVertices;
layout(binding = 1, offset = 4) uniform atomic_uint aIndices;
layout(std140, binding = 2) buffer outPositionsT
{
    vec4 Pos[];
} outPositions;
layout(std140, binding = 3) buffer outColorsT
{
    vec4 Color[];
} outColors;
layout(std140, binding = 4) buffer outNormalsT
{
    vec4 Norm[];
} outNormals;
layout(std140, binding = 5) buffer outIndicesT
{
    ivec4 Index[];
} outIndices;

vec4 getBlock(ivec3 coords)
{
    if (coords.x < 0 || coords.x >= uChunkSize.x ||
        coords.z < 0 || coords.z >= uChunkSize.z ||
        coords.y < 0 || coords.y >= uChunkSize.y) {
        return vec4(0);
    }

    return inColors.Colors[getIndex(coords)];
}

bool occupied(ivec3 coords)
{
    return getBlock(coords).a > 0.5;
}

float occVal(ivec3 coords)
{
    return occupied(coords) ? 0.2 : 0;
}

float occlusion(ivec3 coords, ivec3 normal, vec3 bias, int expand, float weight)
{
    int kExpand = expand;
    float fExpand = float(kExpand);
    float kOcclude = 0.6;
    float minDist = 100.0;

    // Rotate the normal to get the other two normals.
    // di: (0, 1, 0) -> (1, 0, 0)
    // dj: (0, 1, 0) -> (0, 0, 1)
    ivec3 di = normal.yzx;
    ivec3 dj = normal.zxy;

    minDist = 100.0;
    for (int i = -kExpand - 2; i <= kExpand + 2; i++)
    {
        ivec3 ci = di * i;
        for (int j = -kExpand - 2; j <= kExpand + 2; j++)
        {
            ivec3 cj = dj * j;
            if (occupied(coords + normal + ci + cj))
            {
                float dist = length(abs(ci + cj - bias));

                minDist = min(minDist, dist);
            }
        }
    }

    float result = smoothstep(0.0, fExpand * 1.5, minDist);
    result = smoothstep(0.0, 1.0, 1 - result) / (1.0 + 4.0 * pow(1.0 - weight, 3));

    return max(1.0 - result, 0.0);
}

vec4 occlusionVector(
    int expand,
    float weight,
    ivec3 coords,
    ivec3 normal,
    vec3 bias1,
    vec3 bias2,
    vec3 bias3,
    vec3 bias4
)
{
    vec4 occ = vec4(
        occlusion(coords, normal, bias1, expand, weight),
        occlusion(coords, normal, bias2, expand, weight),
        occlusion(coords, normal, bias3, expand, weight),
        occlusion(coords, normal, bias4, expand, weight)
    );

    occ = clamp(occ, 0.0, 1.0);

    return occ;
}

void main()
{
    ivec3 coords = ivec3(gl_GlobalInvocationID.xyz);
    vec3 color = max(vec3(gl_WorkGroupID) / 2.0, vec3(0.1));

    vec4 thisBlock = getBlock(coords);
    if (thisBlock.a < 0.5) {
        return;
    }

    color = thisBlock.rgb;

    ivec3 d = ivec3(1,   0, -1);
    vec3 d2 = vec3(0.5, 0, -0.5);

    bool top    = !occupied(coords + ivec3( 0, 1, 0));
    bool bottom = !occupied(coords + ivec3( 0,-1, 0));
    bool right  = !occupied(coords + ivec3( 1, 0, 0));
    bool left   = !occupied(coords + ivec3(-1, 0, 0));
    bool front  = !occupied(coords + ivec3( 0, 0, 1));
    bool back   = !occupied(coords + ivec3( 0, 0,-1));

    int nSides = (top ? 1 : 0) + (bottom ? 1 : 0) + (right ? 1 : 0) + (left ? 1 : 0) + (front ? 1 : 0) + (back ? 1 : 0);
    if (nSides == 0)
    {
        return;
    }

    uint ndx = atomicCounterAdd(aVertices, nSides * 4);
    uint nIndexVectors = uint((nSides + 1) / 2) * 3;
    uint indexNdx = atomicCounterAdd(aIndices, nIndexVectors);

    int n = 0;
    for (int i = 0; i < nSides; i ++)
    {
        int baseNdx = int(ndx + i * 4);
        outIndices.Index[indexNdx + n / 4][n % 4] = baseNdx + 0; n++;
        outIndices.Index[indexNdx + n / 4][n % 4] = baseNdx + 1; n++;
        outIndices.Index[indexNdx + n / 4][n % 4] = baseNdx + 2; n++;
        outIndices.Index[indexNdx + n / 4][n % 4] = baseNdx + 0; n++;
        outIndices.Index[indexNdx + n / 4][n % 4] = baseNdx + 2; n++;
        outIndices.Index[indexNdx + n / 4][n % 4] = baseNdx + 3; n++;
    }

    while (n < nIndexVectors * 4)
    {
        outIndices.Index[indexNdx + n / 4][n % 4] = int(ndx); n++;
    }

    // Top
    if (top)
    {
        vec4 n = vec4(0, 1, 0, 0);
        vec4 occ = occlusionVector(3, 0.45, coords, ivec3(n.xyz), d2.zyz, d2.zyx, d2.xyx, d2.xyz);

        outPositions.Pos[ndx  ] = vec4(coords + d2.zxz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.x);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.zxx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.y);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xxx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.z);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xxz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.w);
        outNormals.Norm [ndx++] = n;
    }

    // Bottom
    if (bottom)
    {
        vec4 n = vec4(0, -1, 0, 1);

        outPositions.Pos[ndx  ] = vec4(coords + d2.xzz, 1);
        outColors.Color [ndx  ] = vec4(color, 1);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xzx, 1);
        outColors.Color [ndx  ] = vec4(color, 1);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.zzx, 1);
        outColors.Color [ndx  ] = vec4(color, 1);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.zzz, 1);
        outColors.Color [ndx  ] = vec4(color, 1);
        outNormals.Norm [ndx++] = n;
    }

    // Right
    if (right)
    {
        vec4 n = vec4(1, 0, 0, 1);
        vec4 occ = occlusionVector(1, 0.01, coords, ivec3(n.xyz), d2.yxz, d2.yxx, d2.yzx, d2.yzz);

        outPositions.Pos[ndx  ] = vec4(coords + d2.xxz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.x);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xxx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.y);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xzx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.z);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xzz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.w);
        outNormals.Norm [ndx++] = n;
    }

    // Left
    if (left)
    {
        vec4 n = vec4(-1, 0, 0, 1);
        vec4 occ = occlusionVector(2, 0.01, coords, ivec3(n.xyz), d2.yxz, d2.yzz, d2.yzx, d2.yxx);

        outPositions.Pos[ndx  ] = vec4(coords + d2.zxz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.x);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.zzz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.y);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.zzx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.z);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.zxx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.w);
        outNormals.Norm [ndx++] = n;
    }

    // Front
    if (front)
    {
        vec4 n = vec4(0, 0, 1, 1);
        vec4 occ = occlusionVector(2, 0.01, coords, ivec3(n.xyz), d2.zxy, d2.zzy, d2.xzy, d2.xxy);

        outPositions.Pos[ndx  ] = vec4(coords + d2.zxx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.x);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.zzx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.y);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xzx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.z);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xxx, 1);
        outColors.Color [ndx  ] = vec4(color, occ.w);
        outNormals.Norm [ndx++] = n;
    }

    // Back
    if (back)
    {
        vec4 n = vec4(0, 0, -1, 1);
        vec4 occ = occlusionVector(2, 0.01, coords, ivec3(n.xyz), d2.zxy, d2.xxy, d2.xzy, d2.zzy);

        outPositions.Pos[ndx  ] = vec4(coords + d2.zxz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.x);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xxz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.y);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.xzz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.z);
        outNormals.Norm [ndx++] = n;

        outPositions.Pos[ndx  ] = vec4(coords + d2.zzz, 1);
        outColors.Color [ndx  ] = vec4(color, occ.w);
        outNormals.Norm [ndx++] = n;
    }
}
